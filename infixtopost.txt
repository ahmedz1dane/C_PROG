#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

char stack[20];
int top = -1;

void push(char x)
{
    stack[++top] = x;
}

char pop()
{
    if (top == -1)
        return -1;
    else
        return stack[top--];
}

int priority(char x)
{
    if (x == '(')
        return 0;
    if (x == '+' || x == '-')
        return 1;
    if (x == '*' || x == '/')
        return 2;
    return -1; // Added default return statement to handle other characters
}

int eval_postfix(char *postfix)
{
    char ch;
    int i = 0, op1, op2;
    while ((ch = postfix[i++]) != 0)
    {
        if (isdigit(ch))
            push(ch - '0'); 
        else
        { 
            op2 = pop();
            op1 = pop();
            switch (ch)
            {
            case '+':
                push(op1 + op2);
                break;
            case '-':
                push(op1 - op2);
                break;
            case '*':
                push(op1 * op2);
                break;
            case '/':
                push(op1 / op2);
                break;
            }
        }
    }
    return stack[top];
}


int main()
{
    char exp[20],pos[50];
    char *e, x;
    int i=0;

    printf("Enter the expression: ");
    scanf("%s", exp);

    e = exp;

    while (*e != '\0')
    {
        if (isalnum(*e))
            {
                pos[i++]=*e;
            }
        else if (*e == '(')
            push(*e);
        else if (*e == ')')
        {
            while ((x = pop()) != '(')
                {
                    pos[i++]=x;
                }
        }
        else
        {
            while (top != -1 && priority(stack[top]) >= priority(*e))
                {
                    pos[i++]=pop();
                }
            push(*e);
        }
        e++;
    }

    while (top != -1)
    {
        pos[i++]=pop();
        
    }
    pos[i]='\0';
    printf("\nPostfix Expression: %s",pos);
    printf("\nEvaluation of Postfix: %d \n",eval_postfix(pos));
    return 0;
}
